{"version":3,"file":"static/js/ChosenFilm.e09a10e1.chunk.js","mappings":"4NAAMA,EAAQC,EAAAA,MAAAA,QACOC,EAAAA,WACnB,cAAe,eACbC,KAAKC,IAAM,4CACXD,KAAKE,SAAW,6BAChBF,KAAKG,SAAW,uCAChBH,KAAKI,OAAS,gBAEdJ,KAAKK,cAAgB,4BACrBL,KAAKM,YAAc,4BACnBN,KAAKO,YAAc,GAwCpB,OAvCA,sEACD,oGACyBV,EAAMW,IAAN,UAClBR,KAAKE,SADa,2BACcF,KAAKC,MAF5C,cACQQ,EADR,yBAISA,GAJT,kGADC,IACD,gEAOA,WAAsBC,GAAtB,uFAC6Bb,EAAMW,IAAN,UACtBR,KAAKE,SADiB,oBACGQ,GADH,OACQV,KAAKC,MAF1C,cACQU,EADR,yBAISA,GAJT,mGAPA,IAOA,kEAMA,oGACiCd,EAAMW,IAAN,UAC1BR,KAAKE,SADqB,2BACMF,KAAKC,IADX,kBACwBD,KAAKO,cAF9D,cACQK,EADR,yBAISA,GAJT,kGANA,IAMA,8DAOA,WAAoBF,GAApB,uFAC8Bb,EAAMW,IAAN,UACvBR,KAAKE,SADkB,oBACEQ,EADF,mBACeV,KAAKC,MAFlD,cACQY,EADR,yBAISA,GAJT,mGAPA,IAOA,gEAOA,WAAsBH,GAAtB,uFACgCb,EAAMW,IAAN,UACzBR,KAAKE,SADoB,oBACAQ,EADA,mBACaV,KAAKC,MAFlD,cACQa,EADR,yBAISA,GAJT,mGAPA,IAOA,iBAMA,WACE,OAAOd,KAAKO,aACb,IACD,SAAUQ,GACRf,KAAKO,YAAcQ,MACpB,EAjDkBhB,I,qGCWfiB,EAAa,IAAIjB,EAAAA,EACjBkB,GAASC,EAAAA,EAAAA,OAAK,kBAClB,iCAEIC,GAASD,EAAAA,EAAAA,OAAK,kBAClB,gCAEIE,GAAOF,EAAAA,EAAAA,OAAK,kBAAM,iCAkExB,UAjEA,WACE,OAAgCG,EAAAA,EAAAA,YAAhC,eAAOZ,EAAP,KAAiBa,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,IAAU,MAAtBD,QACFE,GAAWC,EAAAA,EAAAA,MAOjB,IALAC,EAAAA,EAAAA,YAAU,WACRX,EAAWY,gBAAgBL,GAASM,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC1CR,EAAYQ,QAEb,CAACP,IACAd,EACF,OACE,iCACE,mBACA,4BACE,SAAC,KAAD,CAAMsB,GAAIN,EAASO,MAAnB,UACE,SAACb,EAAD,OAGF,gBACEc,UAAWC,EAAAA,EAAAA,MACXC,IAAK,mCAAqC1B,EAAS2B,YACnDC,IAAI,MAEN,0BACG5B,EAAS6B,MADZ,IACoB7B,EAAS8B,aAAaC,MAAM,EAAG,GADnD,QAGA,wCAAgBC,KAAKC,MAA8B,GAAxBjC,EAASkC,cAApC,WAGF,sCACA,yBAAMlC,EAASmC,YAEf,oCACA,uBACGnC,EAASoC,OAAOC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACtB,MAAM,GAAN,OAAUA,EAAV,WAGJ,mBAEA,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMhB,GAAI,OAAQC,MAAOP,EAASO,MAAlC,qBAIF,yBACE,SAAC,KAAD,CAAMD,GAAI,SAAUC,MAAOP,EAASO,MAApC,0BAKJ,mBACA,SAAC,EAAAgB,SAAD,CAAUC,UAAU,uCAApB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,SAAS,SAAC/B,EAAD,CAAMG,QAASA,OAC3C,SAAC,KAAD,CAAO2B,KAAK,SAASC,SAAS,SAAClC,EAAD,CAAQM,QAASA","sources":["components/ApiService.jsx","components/ChosenFilm.jsx"],"sourcesContent":["const axios = require('axios').default;\nexport default class ApiService {\n  constructor() {\n    this.key = '?api_key=4177e902090c804b976fbf3cfd72131d';\n    this.BASE_URL = 'https://api.themoviedb.org';\n    this.trending = '/trending/{media_type}/{time_window}';\n    this.search = '/search/movie';\n\n    this.movieCreadits = '/movie/{movie_id}/credits';\n    this.movieReview = '/movie/{movie_id}/reviews';\n    this.searchQuery = '';\n  }\n  async fetchMovies() {\n    const response = await axios.get(\n      `${this.BASE_URL}/3/movie/popular${this.key}`\n    );\n    return response;\n  }\n\n  async fetchMoviesById(id) {\n    const responceById = await axios.get(\n      `${this.BASE_URL}/3/movie/${id}${this.key}`\n    );\n    return responceById;\n  }\n  async fetchMoviesByName() {\n    const fetchMovieByName = await axios.get(\n      `${this.BASE_URL}/3/search/movie/${this.key}&query=${this.searchQuery}`\n    );\n    return fetchMovieByName;\n  }\n\n  async fetchCastById(id) {\n    const fetchCastById = await axios.get(\n      `${this.BASE_URL}/3/movie/${id}/credits${this.key}`\n    );\n    return fetchCastById;\n  }\n\n  async fetchReviewById(id) {\n    const fetchReviewById = await axios.get(\n      `${this.BASE_URL}/3/movie/${id}/reviews${this.key}`\n    );\n    return fetchReviewById;\n  }\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n","import { useEffect, useState, lazy, Suspense } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { Route, Routes } from 'react-router-dom';\n// import Cast from './Cast';\n// import Review from './Review';\n// import Button from './Button';\nimport { useLocation } from 'react-router-dom';\n\nimport s from '../components/movies.module.css';\n\nimport ApiService from './ApiService';\nconst apiService = new ApiService();\nconst Review = lazy(() =>\n  import('./Review.jsx' /*webpackChunkName: 'Review'*/)\n);\nconst Button = lazy(() =>\n  import('./Button.jsx' /*webpackChunkName: 'Button'*/)\n);\nconst Cast = lazy(() => import('./Cast.jsx' /*webpackChunkName: 'Cast'*/));\nfunction ChosenFilm() {\n  const [response, setResponse] = useState();\n  const { movieId } = useParams(null);\n  const location = useLocation();\n\n  useEffect(() => {\n    apiService.fetchMoviesById(movieId).then(({ data }) => {\n      setResponse(data);\n    });\n  }, [movieId]);\n  if (response) {\n    return (\n      <>\n        <hr />\n        <div>\n          <Link to={location.state}>\n            <Button />\n          </Link>\n\n          <img\n            className={s.image}\n            src={'https://image.tmdb.org/t/p/w500/' + response.poster_path}\n            alt=\"\"\n          />\n          <h1>\n            {response.title}({response.release_date.slice(0, 4)})\n          </h1>\n          <p>User score: {Math.round(response.vote_average * 10)}%</p>\n        </div>\n\n        <h2>Overview</h2>\n        <div>{response.overview}</div>\n\n        <h2>Genres</h2>\n        <p>\n          {response.genres.map(({ name }) => {\n            return `${name} `;\n          })}\n        </p>\n        <hr />\n\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to={'cast'} state={location.state}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to={'review'} state={location.state}>\n              Review\n            </Link>\n          </li>\n        </ul>\n        <hr />\n        <Suspense fallback={<h3>Loading...</h3>}>\n          <Routes>\n            <Route path=\"cast\" element={<Cast movieId={movieId} />}></Route>\n            <Route path=\"review\" element={<Review movieId={movieId} />}></Route>\n          </Routes>\n        </Suspense>\n      </>\n    );\n  }\n}\nexport default ChosenFilm;\n"],"names":["axios","require","ApiService","this","key","BASE_URL","trending","search","movieCreadits","movieReview","searchQuery","get","response","id","responceById","fetchMovieByName","fetchCastById","fetchReviewById","newQuery","apiService","Review","lazy","Button","Cast","useState","setResponse","movieId","useParams","location","useLocation","useEffect","fetchMoviesById","then","data","to","state","className","s","src","poster_path","alt","title","release_date","slice","Math","round","vote_average","overview","genres","map","name","Suspense","fallback","path","element"],"sourceRoot":""}