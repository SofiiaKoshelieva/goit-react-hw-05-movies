{"version":3,"file":"static/js/MoviesPage.fb9b8aa7.chunk.js","mappings":"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","sources":["components/MoviesPage.jsx","components/RenderFilms.jsx","services/ApiService.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Notiflix from 'notiflix';\nimport { ImSearch } from 'react-icons/im';\nimport { RenderFilms } from './RenderFilms';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport s from './movies.module.css';\nimport ApiService from '../services/ApiService';\nconst apiService = new ApiService();\nexport default function MoviesPage() {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [inputValue, setValue] = useState('');\n  const [films, setFilms] = useState(null);\n  const [status, setStatus] = useState('idle');\n  useEffect(() => {\n    const prevSearch = new URLSearchParams(location.search).get('query');\n    setValue(prevSearch);\n    apiService.query = prevSearch;\n    apiService.fetchMoviesByName().then(data => {\n      if (location.search && !films) {\n        if (data.data.results.length > 0) {\n          setFilms(data.data.results);\n          setStatus('resolved');\n        }\n      }\n    });\n  }, [films, location.search]);\n\n  function onInputChange(e) {\n    setValue(e.currentTarget.value.toLowerCase());\n  }\n  function onFormSubmit(e) {\n    setStatus('pending');\n    e.preventDefault();\n    if (inputValue.trim() === '') {\n      Notiflix.Notify.warning('Enter a request!!!!!!!');\n      return;\n    }\n    apiService.query = inputValue;\n    apiService.fetchMoviesByName().then(data => {\n      if (data.data.results.length > 0) {\n        setFilms(data.data.results);\n        setStatus('resolved');\n        navigate(`?query=${inputValue}`);\n      } else {\n        setStatus('rejected');\n      }\n    });\n    setValue('');\n    e.target.reset();\n  }\n  return (\n    <>\n      <form className={s.searchForm} onSubmit={onFormSubmit}>\n        <button type=\"submit\" className={s.searchFormButton}>\n          <ImSearch />{' '}\n        </button>\n\n        <input\n          className={s.searchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search films\"\n          onChange={onInputChange}\n        />\n      </form>\n      {status === 'resolved' && (\n        <RenderFilms films={films} query={inputValue} />\n      )}\n    </>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport s from '../components/movies.module.css';\nfunction TrendingFilms({ films }) {\n  return (\n    <>\n      <h1>Trending films</h1>\n      <ul>\n        {films.map(({ id, original_title }) => (\n          <li key={id} className={s.film}>\n            <Link\n              to={`movies/${id}`}\n              className={s.link}\n              state={{ pathname: '/' }}\n            >\n              {original_title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\nfunction RenderFilms({ films, query }) {\n  return (\n    <>\n      <ul>\n        {films.map(({ id, original_title }) => (\n          <li key={id} className={s.film}>\n            <Link\n              to={`${id}`}\n              className={s.link}\n              state={{ pathname: `/movies?query=${query}` }}\n            >\n              {original_title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport { TrendingFilms, RenderFilms };\n","const axios = require('axios').default;\nexport default class ApiService {\n  constructor() {\n    this.key = '?api_key=4177e902090c804b976fbf3cfd72131d';\n    this.BASE_URL = 'https://api.themoviedb.org';\n    this.trending = '/trending/{media_type}/{time_window}';\n    this.search = '/search/movie';\n\n    this.movieCreadits = '/movie/{movie_id}/credits';\n    this.movieReview = '/movie/{movie_id}/reviews';\n    this.searchQuery = '';\n  }\n  async fetchMovies() {\n    const response = await axios.get(\n      `${this.BASE_URL}/3/movie/popular${this.key}`\n    );\n    return response;\n  }\n\n  async fetchMoviesById(id) {\n    const responceById = await axios.get(\n      `${this.BASE_URL}/3/movie/${id}${this.key}`\n    );\n    return responceById;\n  }\n  async fetchMoviesByName() {\n    const fetchMovieByName = await axios.get(\n      `${this.BASE_URL}/3/search/movie${this.key}&query=${this.searchQuery}`\n    );\n    return fetchMovieByName;\n  }\n\n  async fetchCastById(id) {\n    const fetchCastById = await axios.get(\n      `${this.BASE_URL}/3/movie/${id}/credits${this.key}`\n    );\n    return fetchCastById;\n  }\n\n  async fetchReviewById(id) {\n    const fetchReviewById = await axios.get(\n      `${this.BASE_URL}/3/movie/${id}/reviews${this.key}`\n    );\n    return fetchReviewById;\n  }\n  get query() {\n    return this.searchQuery;\n  }\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n"],"names":["apiService","ApiService","MoviesPage","navigate","useNavigate","location","useLocation","useState","inputValue","setValue","films","setFilms","status","setStatus","useEffect","prevSearch","URLSearchParams","search","get","query","fetchMoviesByName","then","data","results","length","className","s","onSubmit","e","preventDefault","trim","target","reset","Notiflix","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","toLowerCase","TrendingFilms","map","id","original_title","to","state","pathname","RenderFilms","axios","require","this","key","BASE_URL","trending","movieCreadits","movieReview","searchQuery","response","responceById","fetchMovieByName","fetchCastById","fetchReviewById","newQuery"],"sourceRoot":""}